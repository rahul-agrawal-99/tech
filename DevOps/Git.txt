GIT = distributed version control system written in C  , currnt version = 2.29.*  , made by linux creator linus torvalds
	SVN(Apache Subversion) is a centralized version control system , easy than git  , Subgit is a tool that migrates SVN to Git.
GITHUB = central hub to store the code remotely to get access anywhere  , owned by microsoft , Alternatives : Pikacode ,Visual Studio Online ,GitEnterprise ,SourceForge.net


		GIT (maintains local repo)                             GITHUB (maintains remote copy)

	-----branch master -------\			     /----------  FEATURE branch    
				   \                        /
	-----branch b1-------------------> PUSH ----------> -------  MAIN branch
				    /
	-----branch b2-------------/

 	both has diff branch conventions but git can push from any branch to any branch on github using push along with branch name 

	Git Nomenclature:
	 *repository consists of a list named .git, where git holds all of its metadata for the catalog
	 *A bare repository is the same as default, but no commits can be made in a bare repository. The changes made in projects cannot be tracked by a bare repository as it doesn’t have a 		working tree. 
	 *Git config used to configure your choice for the Git installation. Using this we can describe the repository behavior, preferences, and user information.
	 * Staging Area/Index : When you are making the commits, you can make innovation to it, format it and review it in the common area
	 * commit : "records changes to the storehouse" 
	 * Git hooks are scripts that run automatically every time a particular event occurs in a Git repository


Notes:

	/* HEAD is pointer pointing to current commit id. HEAD~N  can be used to point previous commits according to order
	/* Detached HEAD :state Where Head doesn't point to most recent commit. If you checkout with an older commit, it will stand the detached head condition
	/* dont use --force , use --force-with-lease   it will push only thode having no conflicts and prevents overwriting over conflicts
	/* Tags are Branch specific
	/* use git rm to track deleted files in staging area
	/* use mergetool for conflicts


******************************************************************************************************************************************************************************************
										Configuring GIT
******************************************************************************************************************************************************************************************
# Initialize git repo for a folder u
	
	git init    OR  git init NewDirectory  ---- init in newly created directory 

# by default it is configured file is stored locally but we can set it to at system , and global level also (without it commit not possible)

	git  config  --global  user.name	"rahul"
				key 		value       stored in config file  (key should be always in entity.type format , value should be in " ")

		key e.g. => user.name , user.email   --- both are need to set in order to commit

# to see config file 
	
	git config --list       ---to see all the file
	git config --get user.name      --- to get specific value for key

# if error occures by connecting 2 terminal to 1 repo use

        rm .git/index.lock

# configuring git for use add and commit in one line using git aliases

	git config --global alias.add-commit '!git add -A && git commit'      ---- after that just use git add-commit -m "MSG"

# Git File Structure

	/Objects  Commits are stored in the form of hash , contains folder named as first 2 char from commit id and in it has a file named as remaining commits char
	Blob is an abbreviation for “binary large object”. When we git add a file such as example_file.txt , git creates a blob object containing the contents

	to store manually use :    echo "sample_msg" | git hash-object --stdin -w           ------it will create hash for msg
					hash is stored in Objects/ FIRST_2_CHAR_OF_HASH / REMAINING_CHAR    
					e.g  for hash 63a8db7bbde7553be61dc4a58086c48481752a85  , Folder name = 63 and file name = a8db7bbde7553be61dc4a58086c48481752a85

			Using a txt file :   git hash-object PATH&NAME --stdin -w 
	


	To view Hash content  :  git cat-file -p FULL_HASH       ----- Fullhash = foldername + file name , Object type + object length + Delimiter + Content = hash

	To get Hash Type      :  git cat-file -t FULL_HASH               ------ use -s to get size






******************************************************************************************************************************************************************************************
										Staging and commiting status's (including ignore files)
******************************************************************************************************************************************************************************************

3 types of areas are there 

	1] workspace    --->   2] staging area     -->     3] local repo            additional 4]remote repo
	code written             after adding          after commiting/pulling			after pushing


# currnt status of repo/all files inside repo

	git status


# see currnt working branch 

	git branch

# staging file to git local repo only  (remember to exclude  file using .gitignore  file , just)

	$create .gitignore file and add confedential/unnessesory file/folder names to be excluded
			 add the file/folder names in that file before staging for first time
			 if staged first without adding in file , first delete it from remote repo if pushed and then remove whole file or just cache and then add it ignore file and add

	$for specific file after checking status
		
			git add filename filenam2

	$FOR all the files at once

			git add .
	
	$remove file from staging area

		from file system                                :    git rm filepath/filename -f       (-f to remove forcefully as it doesnt allow to delete file if staged)
		from cached file only but remain in file system :    git rm filepath/filename --cached
		for all files at once without deleting	 	:    git reset HEAD -- .   (set filename instead of .)  OR  git reset   (it resets latest stage)
															OR  git reset <filename>  
		OR just use                                     :    git clean -n  (to get info about which unstaged files are to be deleted)    
								     git clean -f    ---- to actually delete files	

	$ get list of staged files

		git diff --name-only --cached        OR     git ls-files -s (it also lists commited)

	$ Add all New and Updated Files Only , it will discard the deleted files after previos staging , means deleted files will remain as it is

		git add --ignore-removal

	$ Add all Modified and Deleted Files , it will not stage newly added files

		git add -u  

	$ Add Files by specific suffix only 

		git add *.java    OR   git add *.txt



	** if file is staged without/before adding to .gitigonre , then use  git rm filepath/filename --cached to remove it from cache and then after stage again , if not removed cache then 			file will be in staging even after adding  name in .gitignore 


#  UNSTAGE the changes 

	git reset        --- unstage all changes , no file will be modified only unstaged

	git reset filename     ---- unstage specific file name 




# commiting files   (before commiting make sure to add user.name and user.email in globle config file )   --- it cant be roll back after done like reset

	git commit -m "WRITE_DETAILS_ABOUT_COMMIT"            ---after commit , status will be cleaned until file modifed
	OR
	git commit -a      
	OR
	git commit -am "Commit message."    --- it will also update commit for already staged

# Add new staged files to same commit , only works if latest commit had not pushed to remote repo

	git commit --amend --no-edit             ------ amend means add to last commit


# change the commit msg

	git commit --amend -m "MSG"       ---- it will change msg on latest commit

# Switch to previous commits

	git revert COMMIT_ID      -- it will get in position before this commit happens , use HEAD to switch to prev commit


	///** Both following will remove commits in between HEAD and COMMITID
	
	git reset --hard COMMIT_ID     -- it will make your local code and local history be just like it was at that commit.

	git reset --soft COMMIT_ID      ---it will move your HEAD to where they were , but leave your local files etc. the same

# Switch only perticular files to previous commit

	git checkout HEAD -- file.txt        ---also HEAD~N can be used  for previous commits   
	OR
	git restore pathTo/MyFile       ---it will restore as point to HEAD       
	

# see diff betn currnt stage of workspace and previousaly staged workspace

	git diff      ---- if no changes then no change is done after adding files

#  track changes between updated commit and currnt workspace

	git diff HEAD

# Display the modification on each line of a file:
	
	git blame <file name>

# delete file

	git rm FILE_NAME

# get back at commit state

	git reset COMMIT_ID       ----A reset will revert the current staging index and working directory back to the commit_id.





******************************************************************************************************************************************************************************************
										PUSH , PULL and CLONE
******************************************************************************************************************************************************************************************


Clone: Get a working copy of the remote repository. , git clone means you are making a copy of the repository in your system.

Pull: I am working on this, please get me the new changes that may be updated by others.
	it automatically merges the commits without letting you review them first. If you don’t carefully manage your branches, you may run into frequent conflicts.
	git pull says "bring the changes in the remote repository to where I keep my own code."
	clone is downloading and git pull is refreshing

fetch : it  does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that 					might break if you update your files
	git fetch is the command that says "bring my local copy of the remote repository up to date."

fork   : it means you are copying the repository to your Github account.

merge : After fetching , merge it with current workspace

Cherry-pick :  Cherry picking in Git means to choose a commit from one branch and apply it onto another 
upstream is from where you clone the repository, and downstream is any project that integrates your work with other works. 



# check remote repo status

	git remote -v


# estbilishing connection to remote repo for first time  (origin is just key that has value of url , any key name can be set instead of origin)

	git remote add origin   PROFILE_URL_OF_GITHUB_REPO      ---- it point origin as a key to setted url , at time of push requires authentication if not done previously 

# change remote url 
	
	git remote set-url origin NEW_URL	

# set default remote branch 

	git branch --set-upstream-to URL_REF_NAME  BRANCH_NAME

#  pushing to remote repo 

	git push URL_REF_NAME  BRANCH_NAME    --- in this case URL_REF_NAME = orgin   and default branch is BRANCH_NAME = main  *before it was master
						e.g.  git push origin master  
	OR
	git push URL_REF_NAME <tagname>  
	OR

	git push https://<GITHUB_ACCESS_TOKEN>@github.com/<GITHUB_USERNAME>/<REPOSITORY_NAME>.git          ----using access token 
	
# pull latest copy from remote server (git pull does a git fetch followed by a git merge   means pull changes working space like all the coding files updates with remote)

	git pull URL_OF_REPO      ---- it first initializes git 

# fetch the data (check local commit id and remote commit id for latest if doent match it fetch from remote to sync with local , dont interfare with workfiles)

	git fetch       --- it will fetch the data for current working branch  (for all available branches use :  git fetch --all  )

         
# Cloning / downloading repositary

	$ clone directly (only main branch)
		git clone LINK

	$ clone after created folder
		git clone LINK "FOLDER_NAME" 

	$ clone specific branch 
		git clone -b Branch_name  LINK 










******************************************************************************************************************************************************************************************
										Logging  and Tagging for Commits
******************************************************************************************************************************************************************************************

#  Listing LOGS (contains commit id,msg,suthor,date  for current branch only  , for branch it shows also the previous commits of parent before creating child branch )

	git log 
	OR
	git log --name-only                ----- to get detailed logs for all commits like git show command
	OR
	git log --grep "KEYWORD"       ----it will search all commits with msg having word KEYWORD


# get all info about specific commit like which files has been modified during this commit

	 git show COMMIT-ID    ---- use first 4 char of id for easiness

# log in interactive way 

	git log --graph --oneline --decorate

# tag the commit	(Tagging is generally used to capture a point in history that is used for a marked version release ,By default, git push will not push tags. Tags have to be 							explicitly passed to git push)

	git tag -a TAG_NAME -m "TAG_MSG"  COMMIT_ID        ----tagmsg is optional

# see available tags

	git tag     --- it will list down all tags tagged 
	
	git show TAG_NAME     --- to see details about tag if present

# delete tag 

	git tag -d TAG_NAME

# Tag the condition of commit to simplify

	git bisect start      ---to start/init

	git bisect good    --- if commit is working

	git bisect bad     ---- not working
#




******************************************************************************************************************************************************************************************
										Branch , Squash , Rebase
******************************************************************************************************************************************************************************************

  A file in workspace is available/open/visible for every branch until it gets add or commited to one of the branch , after this it is accessible only to affliated branch
	main branch should not have broken code , it is keep to be reserved for production deployable code
	

# Create Branch 

	git branch NAME

# Rename the branch

	 git branch -m OLD_BRANCH  NEW_BRANCH 
	OR
	git branch -M NEW_BRANCH   ---it will apply to current working branch

# List down all available branches 

	 git branch --list  

	 git branch --merged     ---list out merged branches    (use  --no-merged for not merged )
		
	 git branch -v    ----- list all branches with their last commit id and msg

# switch to another branch

	git checkout BRANCH_NAME     OR   git switch BRANCH   --- only available in Version > 2.23

	git checkout -b BRANCH    --- create branch a switch    OR   git switch -c BRANCH  

	git switch -             ---- switch back to master


# delete the branch

	git branch -d NAME    -- it will give error if deleted before merging

	git branch -D NAME     --- to forcefully delete even not merged


# Merge the Branch   , we can delete child branch after merging , but not in rebase  tip *first rebase child to get new modifications and after reviewing merge it

	check the current working branch and then type

			git merge BRANCH     -- it will merge BRANCH  -> current working branch , all changes in BRANCH will be reflected to current
						** it just pulls the BRANCH so add, commit and push again to get changes in remote repo , for non, conflict situation

			git merge COMMIT_ID      ---- merge with specific commit id of child branch

			///*****  CONFLICT SITUATION  ******///

	CASE 1     centralizsed REPO with only 1 Branch tried 2 pushed by 2 userd for same filename with diff content in it

	if getting conflict error at the time of pushing code , just follow the commands

		1. git pull --rebase REMOTE_NAME BRANCH_NAME
		2. can check status to get idea about which file causing conflicts
		3. git mergetool         --- works only if it has conflicting files , we get vi editor showing conflicts , we can edit file and save after review
		4. git rebase --continue     ---- it will ends pull by updated conflicts files , later we can push no need to commit again

	CASE 2 conflict is occurring at the time of merging 2 branches 

		1. git merge BRANCH      --- merge it with current branch
		2. git status to see conflicted files 
		3. edit the file which causing conflict 
		4. dont need to merge again , just commit and push , get merge info by using log

# Cherry picking

	Cherry picking in Git means to choose a commit from one branch and apply it onto another
	
	1.Make sure you are on the branch you want to apply the commit to.

	 					git switch master
	2.Execute the following:

 						git cherry-pick <commit-hash>     ---- use "-x"  for keep track of the origin of the commit and may avoid merge conflicts in the future

# SQUASH
 

	squash is used to squash the previous commits into one. It is not a command; instead, it is a keyword ,  can merge several commits into a single commit with the compelling 		interactive rebase command


	git merge --squash BRANCH          ---it will track changes linearly until final commit for both the branches , need to commit after 

	OR 

	git rebase -i HEAD ~3       --- squash last 3 branch 

		an editor will pop , there replace the word pick with the squash infront of commit hash which need to be squashed , only 1 should be in Pick 
		after that new commit hash will be generated for that and squashed hash will be removed  
	
# Rebase

	it basically change the base of the branch that is get fixed when branch is getting created e.g. b1 created after 5th commit in main so b1 has base 5th but main evolved to 9th 
		so after rebasing base for b1 will be 9th commit as it is latest commit in main
	used to apply a sequence of commits from distinct branches into a final commit. It is an alternative of git merge command. It is a linear process of merging,It merges the different 		commits one by one , Merging preserves history while Rebasing rewrites history. merge is safe but rebase can be severe 
 
		steps:

			*Checkout to the desired branch
			*resolve conflicts
			git rebase MASTER_BRANCH_NAME       ----it will update base to later commit of master branch with own commits in order according time 
			* dont delete after as some modifications in child will not be in master






			
******************************************************************************************************************************************************************************************
										STASHing
******************************************************************************************************************************************************************************************


     stash

		git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy

		it will updates current repo with latest commit on current working branch and save the changes made later so that after pop we get it back

		during stash , we can switch to another branch and pop the stash there

# craete stash  , stashed can be created recursively means , from main branch -> stash -> stash ->stash , all stash can be tracked with list cmd 

	save all changes , not mandetory but good practice is after staging file use command 

		git stash         --- if getting No local changes use (git reset --soft REMOTE_NAME/MAIN_BRANCH_NAME )
	OR
		git stash save "MSG"     ---to save msg with stash for later use 

	It will place current workplace to last commit done on current working branch , if another stash is done it will place on top of it like stack and have also last commit 
	we can add commit also during stash , new stashes has an id from 0 onward in created order , 1st stash created has greater id

# get total stashed list

		git stash list

# Apply the stash 

		git stash apply STASH_ID    ---get id using list
		OR
		git stash apply N     ---- N is stash id no. like 0,1,2

	It will apply the stashed changes to current workflow that is been left before calling stash 1st time , if conflict happens , we will get msg

# remove the latest created stash 

		git stash pop  <== remove stash effect 
				---- git stash pop means: Run git stash apply. If it succeeds, run git stash drop  
	
		git stash drop STASH_ID     --- forcefully remove the stash without applying




git diff HEAD .





























 
