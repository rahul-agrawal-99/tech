#  Syntax Structure 


CONTEXT {   # servers behavior
    DIRECTIVE   # customize behavior
}

# ----------------------------------------------------------------------------------------------------------------

#  Types Of Context 

1. Main Context: 
    The main context contains directives that apply to the entire Nginx configuration.
    Directives in this context are typically global settings.

user nginx;  #  which user it should select, nginx is used for security enhancement
worker_processes 4;  #  no of worker dealing with incoming , generally cpu cores but can be increased if has higher RAM and IO


2. Events Context:
    The events context is used to configure parameters related to Nginx event processing model, 
    such as worker connections and use of the multi_accept directive.

events {
    worker_connections 1024;   # maximum number of simultaneous connections that each worker process can handle
}
  
# Total max Connections = worker_processes  *  worker_connections


3. Http Context:
    The http context contains directives that apply to the entire HTTP server.
    Server-wide settings, such as MIME types and default types, are often configured in this context.


http {
    include       mime.types;
    default_type  application/octet-stream;
}


4. Server Context:
    The server context is used to define configuration for a virtual server.
    Each server block typically corresponds to a different domain or IP address.

http {
    # Include additional configuration files from the specified directory
    include /etc/nginx/conf.d/*.conf;

    # Set the default MIME type for files that don't have a specific type
    default_type application/octet-stream;

    # Enable the use of the sendfile system call for file transmissions
    sendfile on;

    # Enable the TCP_NOPUSH socket option to send headers in one packet
    tcp_nopush on;

    # Enable the TCP_NODELAY socket option to send small packets without delay
    tcp_nodelay on;

    # Set the maximum time that a connection can remain open in the keep-alive state
    keepalive_timeout 65;   # keepalive_timeout header   for dynamic timings

    # Set the maximum allowed size of the client request body
    client_max_body_size 10M;
}



4.1 . Location Context:
    it is used within http to define location for specific URL path.
    The location context is used to configure settings for specific URL patterns within a server block.
    Regular expressions or simple prefixes can be used to define locations.


# server static file to / path 
location / {
    root /path/to/website;   #  OR alias   (diff. is appending path)
    index index.html;    # default , priority goes for left to right (more----->least)
    # try_files my_custom_name.html    # look for custom file in root DIR
    # try_files my_custom_name.html =404 ; # throw 404 if not found


    # custom error page
    error_page 404 = /404.html;
     
    location = /404.html {
        internal;
        root /path/to/your/error/pages;
    }
}
# NOTE : by default nginx will not server any index file again inside root DIR like /path/to/website/test1/index.html
#        to do this different location need to configure in order to serve that file at different path.
#        e.g.  for Path   /test   , it will look up in /path/to/website/test  DIR  if root is /path/to/website/  
#               but for root /path/to/website/test1  it will look for /path/to/website/test1/test  DIR
#               So to resolve this use   alias instead of root , then it will not append path in root

#  for backend
location /api {
        # Configuration for requests to the /api endpoint
        # Proxy settings
        proxy_pass http://backend-api:8000;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;

        # Additional settings for this location
        # Add more directives as needed
    }

    location /static {
        # Configuration for requests to the /static endpoint

        # Serve static files directly
        alias /path/to/static/files;
        expires 30d;  # Set the cache expiration time for static files

        # Additional settings for this location
        # Add more directives as needed
    }

    # Redirect Path 
    #  send a specified response code and terminate request processing.
    # It can be used to perform an immediate redirect with a specific HTTP status code.

    location /path {
        return 307 /existing-path
    }

    # Rewrite Path 
    #  changing the requested URL before it reaches the location matching phase. 
    #  It can be used for various purposes such as URL rewriting, internal redirection, and modification of request parameters.

    location /old-url {
        rewrite ^/old-url/(.*)$ /new-url/$1 permanent;
    }

    #  PATH with Regular Expression , use ~* to specify RE 

    location ~* /sample[0-9]/ {

    }

4.2 types Context:
    It allows you to configure how Nginx determines the MIME type of a file based on its extension
    it basically returns content-type along with file to understand better about file to client
    mostly done for if static content is severed

    To declare automatically : 

    http{
        include mime.types;    # get nginx default MIME types , stored in /etc/nginx/mime.types
    }

    Manual Declaration:

    types {
        text/html                     html htm shtml;
        text/css                      css;    #   Content-Type to return        File extention on server
        application/javascript        js;
        application/json              json;
        image/jpeg                    jpeg jpg;
        image/png                     png;
        # Add more MIME types and file extensions as needed
    }


5. Stream Context:
    The stream context is used for TCP and UDP proxying configurations.
    It is used for generic stream processing, including load balancing and proxying.

stream {

     upstream backend {
        server ec2_instance_1_ip:80;
        server ec2_instance_2_ip:80;
        # Add more server entries for additional EC2 instances
    }

    server {
        listen 12345;
        proxy_pass backend;  # it will use round robin to select server (select 1 in circular list)
    }
}
